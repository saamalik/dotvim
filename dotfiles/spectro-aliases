[ -f ~/projects/k8s-projects/kubectl-aliases/.kubectl_aliases ] && source ~/projects/k8s-projects/kubectl-aliases/.kubectl_aliases


stmux() {
  cd ~/projects/spectro || exit 1
  tmux attach-session -t spectro ||
  tmux \
    new -s spectro -n shell \; \
    neww -n blare -t 94 -c blare \; \
    neww -n pax -t 95 -c pax \; \
    neww -n swiss -t 96 -c swissarmy \; \
    neww -n port1 -t 97 \; send-keys 'kubectl -n hubble-system port-forward svc/mongo 27017' \; \
    neww -n cicd -t 98 \; send-keys 'export KUBECONFIG=~/.kube/kube-gke-spectro-cicd' C-m \; \
    neww -n vpn -t 99 \; \
    bind-key I send-keys 'nsenter -t 1 -m -u -n -i bash'
}

# Generic
kprint() {
  cat "${BASH_SOURCE[0]}"
}

kctx() {
  (
    cd ~/.kube/ || exit 1
    # shellcheck disable=SC2012
    KUBE=$(ls kube-* | fzf)
    [[ -n "$KUBE" ]] && ln -sf "$KUBE" config
  )
}

klctx() {
    # shellcheck disable=SC1083
    local SEARCH="${1:-$HOME/Downloads}"
    [[ "$1" == "-" ]] && SEARCH="$HOME/.kube"
    local KUBE=$(ls "$SEARCH" -p -t | grep -v / | fzf)
    if [[ -n "$KUBE" ]]; then
      export KUBECONFIG="${SEARCH%/}/$KUBE"
    fi
}

klbip() {
  kubectl -n "$1" get svc "$2" -o jsonpath="{.status.loadBalancer.ingress[*]['ip', 'hostname']}"
}

# Spectro specific
kconfig() {
  kubectl get secret $1-kubeconfig-backup -o json -o jsonpath="{['data']['\value']}" | base64 -d
}

knsresources() {
  kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n "${1:-default}"
}

kpclusterapi() {
  # shellcheck disable=SC2207
  api=( $(kubectl -n "$1" get cluster-api -o name) )
  for r in "${api[@]}"; do
    kpatchfinalizer "$1" "$r"
  done
}

kpatchfinalizer() {
  kubectl -n "$1" patch --type merge -p '{"metadata":{"finalizers":[]}}' "$2"
}

kproxy() {
  [[ -z "$1" ]] && { echo "Specify name"; return 1; }
  [[ -z "$KUBECONFIG" ]] && { echo "KUBECONFIG need to be defined"; return 1; }

  sed -i -E \
    -e "s/certificate-authority-data.*/#&\\
    insecure-skip-tls-verify: true/" \
    -e "s/server:.*/#&\\
    server: https:\/\/$1.proxy.spectrocloud.com:6443/" \
    "$KUBECONFIG"
}

kproxydev() {
  [[ -z "$1" ]] && { echo "Specify name"; return 1; }
  [[ -z "$KUBECONFIG" ]] && { echo "KUBECONFIG need to be defined"; return 1; }

  sed -i -E \
    -e "s/certificate-authority-data.*/#&\\
    insecure-skip-tls-verify: true/" \
    -e "s/server:.*/#&\\
    server: https:\/\/cluster-$1.proxy.dev.spectrocloud.com:443/" \
    "$KUBECONFIG"
}



#export -f kpclusterapi kpatchfinalizer kprint knsresources kctx klctx

alias awsclean="$HOME/projects/spectro/palette/awsclean.sh"

return 1

alias svpnresolver='echo "$VPNPASSWD" | sudo openconnect vpn.spectrocloud.com --user "$VPNUSER" --passwd-on-stdin --servercert "$SERVERPIN"'
alias svpn='echo "$VPNPASSWD" | sudo openconnect vpn.spectrocloud.com --script "$HOME/Documents/vpn/no_resolverupdate.sh" --user "$VPNUSER" --passwd-on-stdin --servercert "$SERVERPIN"'
