[ -f ~/projects/k8s-projects/kubectl-aliases/.kubectl_aliases ] && source ~/projects/k8s-projects/kubectl-aliases/.kubectl_aliases

stmux() {
  cd ~/projects/spectro || exit 1
  tmux attach-session -t spectro ||
  tmux \
    new -s spectro -n shell \; \
    neww -n optic -c optic \; \
    neww -n hubble -c hubble \; \
    neww -n jet -c jet \; \
    neww -n ally -c ally \; \
    neww -n pallet -c pallet \; \
    neww -n pax -c pax \; \
    neww -n fun1 \; \
    neww -n k9s \; send-keys 'k9s' \; \
    neww -n cicd -t 98 \; send-keys 'export KUBECONFIG=~/.kube/kube-gke-spectro-cicd' C-m \; \
    neww -n vpn -t 99
}

# Generic
kprint() {
  cat "${BASH_SOURCE[0]}"
}

kctx() {
  (
    cd ~/.kube/ || exit 1
    # shellcheck disable=SC2012
    KUBE=$(ls kube-* | fzf)
    [[ -n "$KUBE" ]] && ln -sf "$KUBE" config
  )
}

knsresources() {
  kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n "${1:-default}"
}

klbip() {
  kubectl -n "$1" get svc "$2" -o jsonpath="{.status.loadBalancer.ingress[*]['ip', 'hostname']}"
}

kpatchfinalizer() {
  kubectl -n "$1" patch --type merge -p '{"metadata":{"finalizers":[]}}' "$2"
}

# Spectro specific
kconfig() {
  kubectl get secret $1-kubeconfig-backup -o json -o jsonpath="{['data']['\value']}" | base64 -d
}

kpclusterapi() {
  # shellcheck disable=SC2207
  api=( $(kubectl -n "$1" get cluster-api -o name) )
  for r in "${api[@]}"; do
    kpatchfinalizer "$1" "$r"
  done
}

export -f kpclusterapi kpatchfinalizer kprint knsresources kctx

alias awsclean="$HOME/projects/spectro/palette/awsclean.sh"

alias clusterservice_lb="klbip hubble-system cluster-service"
alias ui_lb="klbip hubble-system spectro-ui"
alias ui_kill="kubectl -n hubble-system delete pod -l app=ui"
